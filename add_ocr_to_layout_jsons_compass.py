#!/usr/bin/env python

"""
This script processes JSON files containing layout data, extracting OCR text from specified shapes
and updating the JSON with the OCR results. It is designed to work with JSON files generated by LabelMe, specifically for layout analysis tasks.

It is not wired towards numerical tables, rather firm descriptions in the Compass books.
"""

import os
import sys
import json
import cv2
import numpy as np
import pytesseract
import platform
from PIL import Image


TESS_PATH_LOCAL1 = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
TESS_PATH_LOCAL2 = r"/usr/bin/tesseract"


def load_config(config_path):
    """Load OCR configuration from JSON file."""
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        print(f"‚úì Loaded config from {config_path}")
        return config
    except Exception as e:
        print(f"‚úó Error loading config file {config_path}: {e}")
        sys.exit(1)


def setup_tesseract():
    """Setup Tesseract path based on OS."""
    if platform.system() == "Windows":
        TESS_PATH_LOCAL = TESS_PATH_LOCAL1
    else:
        TESS_PATH_LOCAL = TESS_PATH_LOCAL2
    
    pytesseract.pytesseract.tesseract_cmd = TESS_PATH_LOCAL
    print(f"‚úì Tesseract path set to: {TESS_PATH_LOCAL}")


def find_json_image_pairs(input_dir):
    """Find all matching JSON-image pairs in the directory."""
    pairs = []
    
    print(f"üîç Scanning directory: {input_dir}")
    
    for root, _, files in os.walk(input_dir):
        json_files = [f for f in files if f.lower().endswith('.json')]
        
        for json_file in json_files:
            json_path = os.path.join(root, json_file)
            base_name = os.path.splitext(json_file)[0]
            
            # Look for matching image
            img_path = None
            for ext in ['.jpg', '.jpeg', '.png']:
                potential_img = os.path.join(root, base_name + ext)
                if os.path.exists(potential_img):
                    img_path = potential_img
                    break
            
            if img_path:
                pairs.append((json_path, img_path))
    
    print(f"‚úì Found {len(pairs)} JSON-image pairs")
    return pairs


def should_process_shape(shape, label_types, ocr_overwrite):
    """Determine if a shape should be processed based on config."""
    # Check if label is in target types
    if shape.get("label") not in label_types:
        return False
    
    # Check if OCR already exists and overwrite setting
    if not ocr_overwrite:
        tesseract_output = shape.get("tesseract_output", {})
        if tesseract_output.get("ocr_text") is not None:
            return False
    
    return True


def extract_roi_from_shape(img, shape):
    """Extract region of interest from image based on shape points."""
    if "points" not in shape or len(shape["points"]) < 2:
        return None
    
    pts = np.array(shape["points"], dtype=np.int32)
    x1, y1 = np.min(pts[:, 0]), np.min(pts[:, 1])
    x2, y2 = np.max(pts[:, 0]), np.max(pts[:, 1])
    
    # Ensure coordinates are within image bounds
    h, w = img.shape[:2]
    x1, y1 = max(0, x1), max(0, y1)
    x2, y2 = min(w, x2), min(h, y2)
    
    if x2 <= x1 or y2 <= y1:
        return None
    
    roi = img[y1:y2, x1:x2]
    return roi if roi.size > 0 else None


def perform_ocr(roi, tesseract_conf):
    """Perform OCR on region of interest."""
    try:
        # Convert to PIL Image
        if len(roi.shape) == 3:
            pil_img = Image.fromarray(cv2.cvtColor(roi, cv2.COLOR_BGR2RGB))
        else:
            pil_img = Image.fromarray(roi)
        
        # Perform OCR
        ocr_text = pytesseract.image_to_string(pil_img, config=tesseract_conf).strip()
        
        # Get confidence score
        try:
            data = pytesseract.image_to_data(pil_img, config=tesseract_conf, 
                                           output_type=pytesseract.Output.DICT)
            conf_scores = [float(c) for c in data['conf'] if str(c).isdigit() and float(c) > 0]
            ocr_score = float(np.mean(conf_scores)) if conf_scores else None
        except:
            ocr_score = None
        
        return ocr_text, ocr_score
    
    except Exception as e:
        print(f"    ‚ö†Ô∏è  OCR failed: {e}")
        return "", None


def process_json_image_pair(json_path, img_path, config):
    """Process a single JSON-image pair."""
    print(f"\nüìÑ Processing: {os.path.basename(json_path)}")
    print(f"    üìÇ Full path: {json_path}")
    
    # Load JSON
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        print(f"    ‚úó Error loading JSON: {e}")
        return False
    
    # Load image
    img = cv2.imread(img_path)
    if img is None:
        print(f"    ‚úó Error loading image: {img_path}")
        return False
    
    shapes = data.get("shapes", [])
    label_types = config["label_types"]
    tesseract_conf = config["tesseract_conf"]
    ocr_overwrite = config["ocr_overwrite"]
    
    # Filter shapes to process
    shapes_to_process = [
        (i, shape) for i, shape in enumerate(shapes)
        if should_process_shape(shape, label_types, ocr_overwrite)
    ]
    
    if not shapes_to_process:
        print(f"    ‚ÑπÔ∏è  No shapes to process (found {len(shapes)} shapes total)")
        return True
    
    print(f"    üéØ Processing {len(shapes_to_process)} shapes out of {len(shapes)} total")
    
    # Process each shape
    processed_count = 0
    for i, (shape_idx, shape) in enumerate(shapes_to_process):
        label = shape.get("label", "unknown")
        print(f"\n\n    üìç [{i+1}/{len(shapes_to_process)}] Processing '{label}' shape (index {shape_idx}) in {json_path}")
        
        # Extract ROI
        roi = extract_roi_from_shape(img, shape)
        if roi is None:
            print(f"        ‚ö†Ô∏è  Invalid ROI, skipping")
            continue
        
        # Perform OCR
        ocr_text, ocr_score = perform_ocr(roi, tesseract_conf)
        
        # Update shape with OCR results
        if "tesseract_output" not in shape:
            shape["tesseract_output"] = {}
        
        shape["tesseract_output"]["ocr_text"] = ocr_text
        shape["tesseract_output"]["ocr_score"] = ocr_score
        
        # Show result
        display_text = ocr_text.replace('\n', '\\n') if ocr_text else "(empty)"
        conf_str = f", conf: {ocr_score:.1f}" if ocr_score else ""
        print(f"        ‚úì OCR result: '{display_text}'{conf_str}")
        
        processed_count += 1
    
    # Save updated JSON
    try:
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"    ‚úÖ Saved {processed_count} OCR results to JSON: {json_path}")
        return True
    except Exception as e:
        print(f"    ‚úó Error saving JSON: {e}")
        return False


def main():
    if len(sys.argv) < 3:
        print("Usage: python ocr_batch.py <config_file> <input_directory>")
        print("\nExample config file (ocr_config.json):")
        print(json.dumps({
            "label_types": ["text_cell", "numerical_cell", "column_header"],
            "tesseract_conf": "--psm 7 --oem 3 -c tessedit_char_whitelist=0123456789.-",
            "ocr_overwrite": False
        }, indent=2))
        sys.exit(1)
    
    config_file = sys.argv[1]
    input_dir = sys.argv[2]
    
    if not os.path.exists(config_file):
        print(f"‚úó Config file not found: {config_file}")
        sys.exit(1)
    
    if not os.path.exists(input_dir):
        print(f"‚úó Input directory not found: {input_dir}")
        sys.exit(1)
    
    print("üöÄ Starting OCR batch processing...")
    print(f"üìÅ Input directory: {input_dir}")
    print(f"‚öôÔ∏è  Config file: {config_file}")
    
    # Load configuration
    config = load_config(config_file)
    
    # Validate config
    required_keys = ["label_types", "tesseract_conf", "ocr_overwrite"]
    for key in required_keys:
        if key not in config:
            print(f"‚úó Missing required config key: {key}")
            sys.exit(1)
    
    print(f"üéØ Target labels: {config['label_types']}")
    print(f"üîß Tesseract config: {config['tesseract_conf']}")
    print(f"üîÑ Overwrite existing OCR: {config['ocr_overwrite']}")
    
    # Setup Tesseract
    setup_tesseract()
    
    # Find all JSON-image pairs
    pairs = find_json_image_pairs(input_dir)
    
    if not pairs:
        print("‚úó No JSON-image pairs found!")
        sys.exit(1)
    
    # Process all pairs
    print(f"\nüìã Processing {len(pairs)} pairs...")
    successful = 0
    failed = 0
    
    for i, (json_path, img_path) in enumerate(pairs):
        print(f"\n[{i+1}/{len(pairs)}] " + "="*60)
        if process_json_image_pair(json_path, img_path, config):
            successful += 1
        else:
            failed += 1
    
    # Final summary
    print(f"\n{'='*80}")
    print(f"üéâ Batch processing complete!")
    print(f"‚úÖ Successfully processed: {successful}")
    print(f"‚ùå Failed: {failed}")
    print(f"üìä Success rate: {successful/(successful+failed)*100:.1f}%" if (successful+failed) > 0 else "N/A")


if __name__ == "__main__":
    main()